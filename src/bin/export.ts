import { readdirSync, writeFileSync } from 'fs'
import { join, parse, relative } from 'path'
;(process.env as any).GCLOUD_PROJECT = '__GCLOUD_PROJECT__'

let prettier: typeof import('prettier') | undefined = undefined
try {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  prettier = require('prettier')
  // eslint-disable-next-line no-empty
} catch (error) {}

const dirPattern = /^(?!_).+$/
const filePattern = /^(?!_).+(?<!\.(test|spec))\.(js|ts)$/

const functionName = (dirname: string, name: string) => `'${dirname}-${name}'`
const mpath = (dirname: string, name: string) => `'./${dirname}/${name}'`
const vname = (dirname: string, name: string) => `__${dirname}_${name}__`

const importModuleFunction = [
  `const importModule = (functionNames: string[], modulePath: string) => {
  return !process.env['FUNCTION_NAME'] || functionNames.includes(process.env['FUNCTION_NAME'])
    ? require(modulePath)
    : undefined
}`,
]

export const exportFunctions = async (baseDir: string) => {
  const subdirs = readdirSync(baseDir, {
    withFileTypes: true,
  })
    .filter((subdir) => subdir.isDirectory() && dirPattern.test(subdir.name))
    .map((subdir) => {
      const files = readdirSync(join(baseDir, subdir.name))
        .filter((filename) => filePattern.test(filename))
        .map((filename) => parse(filename).name)
      return { dirname: subdir.name, files }
    })

  const typeImports = subdirs.flatMap(({ dirname, files }) =>
    files.map(
      (filename) =>
        `import type * as ${vname(dirname, filename)} from ${mpath(
          dirname,
          filename,
        )}`,
    ),
  )

  const functionImports = subdirs.map(({ dirname, files }) =>
    [
      `export const ${dirname} = {`,
      ...files.map((filename) => {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const mod = require(join(
          relative(__dirname, baseDir),
          dirname,
          filename,
        ))

        const functions = Object.entries(mod).filter(
          ([, value]) =>
            typeof value === 'function' &&
            (value as any).__trigger &&
            typeof (value as any).__trigger === 'object',
        )
        const functionNamesArg = functions.map(([key]) =>
          functionName(dirname, key),
        )

        return `  ...importModule([${functionNamesArg.join(', ')}], ${mpath(
          dirname,
          filename,
        )}),`
      }),
      `}`,
    ].join('\n'),
  )

  const typeExports = [
    `export type FunctionsModule = {`,
    ...subdirs.map(({ dirname, files }) => {
      const intersection = files
        .map((name) => `typeof ${vname(dirname, name)}`)
        .join(' & ')
      return `  ${dirname}: ${intersection}`
    }),
    `}`,
  ]

  const content = [
    ['/* Auto generated by fireschema */'],
    importModuleFunction,
    typeImports,
    functionImports,
    typeExports,
  ]
    .map((sublines) => sublines.join('\n'))
    .join('\n\n')

  await write(baseDir, content)
}

const write = async (baseDir: string, content: string) => {
  const outputPath = join(baseDir, 'main.ts')
  if (!prettier) {
    writeFileSync(outputPath, content)
    return
  }
  const config = await prettier.resolveConfig(outputPath)
  const formatted = prettier.format(content, {
    ...(config ?? undefined),
    filepath: outputPath,
  })
  writeFileSync(outputPath, formatted)
  console.log(`ðŸŽ‰ Created ${outputPath}`)
}
